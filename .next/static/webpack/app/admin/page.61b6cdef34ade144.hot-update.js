"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\nconst API_BASE_URL = \"https://joash-backend.onrender.com/api\";\n// API functions\nconst api = {\n    // Hero section\n    getHero: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/hero\"));\n        if (!response.ok) throw new Error(\"Failed to fetch hero data\");\n        return response.json();\n    },\n    updateHero: async (data, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/hero\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update hero data\");\n        return response.json();\n    },\n    // About section\n    getAbout: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/about\"));\n        if (!response.ok) throw new Error(\"Failed to fetch about data\");\n        return response.json();\n    },\n    updateAbout: async (data, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/about\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update about data\");\n        return response.json();\n    },\n    // Technologies\n    getTechnologies: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/technologies\"));\n        if (!response.ok) throw new Error(\"Failed to fetch technologies\");\n        return response.json();\n    },\n    updateTechnologies: async (data, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/technologies\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update technologies\");\n        return response.json();\n    },\n    // Projects\n    getProjects: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/projects\"));\n        if (!response.ok) throw new Error(\"Failed to fetch projects\");\n        return response.json();\n    },\n    createProject: async (data, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/projects\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create project\");\n        return response.json();\n    },\n    updateProject: async (id, data, token, imageFile)=>{\n        const formData = new FormData();\n        Object.entries(data).forEach((param)=>{\n            let [key, value] = param;\n            if (key === \"technologies\" && Array.isArray(value)) {\n                formData.append(key, value.join(\",\"));\n            } else if (value !== undefined && value !== null) {\n                formData.append(key, value);\n            }\n        });\n        if (imageFile) {\n            formData.append(\"image\", imageFile);\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/projects/\").concat(id), {\n            method: \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to update project\");\n        return response.json();\n    },\n    deleteProject: async (id, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/projects/\").concat(id), {\n            method: \"DELETE\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            }\n        });\n        if (!response.ok) throw new Error(\"Failed to delete project\");\n    },\n    // Social links\n    getSocials: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/socials\"));\n        if (!response.ok) throw new Error(\"Failed to fetch social links\");\n        return response.json();\n    },\n    updateSocials: async (data, token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/socials\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update social links\");\n        return response.json();\n    },\n    // Contact\n    submitContact: async (data)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/contact\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to submit contact message\");\n    },\n    // Authentication\n    login: async (username, password)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/admin/login\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username,\n                password\n            })\n        });\n        if (!response.ok) throw new Error(\"Invalid credentials\");\n        return response.json();\n    },\n    logout: async (token)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/logout\"), {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token)\n            }\n        });\n        if (!response.ok) throw new Error(\"Failed to logout\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});